---
// Simplified header component
import TopMarquee from './TopMarquee.astro';
---

<TopMarquee />

<div class="header-wrapper" id="headerWrapper">
  <header class="header" id="mainHeader">
    <div class="logo">KAREN ORTIZ</div>
    
    <nav class="nav">
      <a href="#about">About</a>
      <a href="#services">Services</a>
      <a href="#projects">Projects</a>
      <a href="#reviews">Reviews</a>
    </nav>
    
    <button class="contact-btn">Contact Me</button>
    
    <button class="menu-btn" id="menuBtn">
      <span></span>
      <span></span>
      <span></span>
    </button>
  </header>
</div>

<div class="mobile-menu" id="mobileMenu">
  <div class="mobile-menu-content">
    <nav class="mobile-nav">
      <a href="#about">About</a>
      <a href="#services">Services</a>
      <a href="#projects">Projects</a>
      <a href="#reviews">Reviews</a>
      <button class="mobile-contact-btn">Contact Me</button>
    </nav>
  </div>
</div>

<style>
  .header-wrapper {
    position: fixed;
    top: 32px; /* Account for TopMarquee height */
    left: 0;
    right: 0;
    z-index: 100;
    background: white;
    background-image: 
      linear-gradient(to right, rgba(204, 204, 204, 0.3) 1px, transparent 1px), 
      linear-gradient(to bottom, rgba(204, 204, 204, 0.3) 1px, transparent 1px);
    background-size: 40px 40px, 40px 40px;
    background-position: center;
    background-repeat: repeat;
    backdrop-filter: blur(15px);
    -webkit-backdrop-filter: blur(15px);
    transition: background-image 0.3s ease, box-shadow 0.3s ease, border-bottom 0.3s ease;
    border-bottom: 1px solid rgba(204, 204, 204, 0.2);
  }

  .header-wrapper.scrolled {
    background: rgba(255, 255, 255, 0.98);
    background-image: 
      linear-gradient(to right, rgba(204, 204, 204, 0.15) 1px, transparent 1px), 
      linear-gradient(to bottom, rgba(204, 204, 204, 0.15) 1px, transparent 1px);
    background-size: 40px 40px, 40px 40px;
    background-position: center;
    background-repeat: repeat;
    box-shadow: 0 4px 32px rgba(0, 0, 0, 0.08);
    border-bottom: 1px solid rgba(204, 204, 204, 0.25);
  }

  .header-wrapper.hiding {
    pointer-events: none;
  }

  .header-wrapper.hidden {
    pointer-events: none;
  }

  /* Smooth hover effects for better interaction */
  .header-wrapper:hover {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }

  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 24px;
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
  }

  @media (max-width: 768px) {
    .header-wrapper {
      top: 28px; /* Account for mobile TopMarquee height */
    }
    
    .header {
      padding: 8px 16px;
    }
  }

  .logo {
    color: #060314;
    font-family: var(--font-display);
    font-size: clamp(17px, 3.5vw, 28px);
    transition: color 0.3s ease, transform 0.2s ease;
    cursor: pointer;
  }

  .logo:hover {
    color: #131019;
    transform: scale(1.05);
  }

  .nav {
    display: flex;
    gap: 32px;
  }

  .nav a {
    color: #131019;
    font-family: var(--font-display);
    text-decoration: none;
    font-size: clamp(11px, 2.1vw, 17px);
    transition: color 0.3s ease, transform 0.2s ease;
    position: relative;
  }

  .nav a:hover {
    color: #060314;
    transform: translateY(-2px);
  }

  .nav a::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 0;
    height: 2px;
    background: #060314;
    transition: width 0.3s ease;
  }

  .nav a:hover::after {
    width: 100%;
  }

  .contact-btn {
    background: transparent;
    border: 2px solid #060314;
    color: #060314;
    padding: 6px 12px;
    font-family: var(--font-display);
    font-size: clamp(10px, 1.8vw, 14px);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .contact-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: #060314;
    transition: left 0.3s ease;
    z-index: -1;
  }

  .contact-btn:hover::before {
    left: 0;
  }

  .contact-btn:hover {
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(6, 3, 20, 0.2);
  }

  .menu-btn {
    display: none;
    flex-direction: column;
    gap: 4px;
    background: none;
    border: none;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .menu-btn:hover {
    transform: scale(1.1);
  }

  .menu-btn span {
    width: 20px;
    height: 2px;
    background: #060314;
    transition: all 0.3s ease;
  }

  .menu-btn:hover span {
    background: #131019;
  }

  .mobile-menu {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(10px);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .mobile-menu.open {
    opacity: 1;
    visibility: visible;
  }

  .mobile-menu-content {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%;
  }

  .mobile-nav {
    display: flex;
    flex-direction: column;
    gap: 32px;
    text-align: center;
    transform: translateY(30px);
    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .mobile-menu.open .mobile-nav {
    transform: translateY(0);
  }

  .mobile-nav a {
    color: white;
    font-family: var(--font-display);
    text-decoration: none;
    font-size: clamp(18px, 4vw, 24px);
    font-weight: 300;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    position: relative;
    opacity: 0;
    transform: translateY(20px);
  }

  .mobile-menu.open .mobile-nav a {
    opacity: 1;
    transform: translateY(0);
  }

  .mobile-nav a:nth-child(1) { transition-delay: 0.1s; }
  .mobile-nav a:nth-child(2) { transition-delay: 0.2s; }
  .mobile-nav a:nth-child(3) { transition-delay: 0.3s; }
  .mobile-nav a:nth-child(4) { transition-delay: 0.4s; }

  .mobile-nav a:hover {
    color: #ffffff;
    transform: scale(1.05);
    text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
  }

  .mobile-nav a::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, white, transparent);
    transition: width 0.4s ease;
  }

  .mobile-nav a:hover::after {
    width: 100%;
  }

  .mobile-contact-btn {
    background: transparent;
    border: 2px solid white;
    color: white;
    padding: 12px 24px;
    font-family: var(--font-display);
    font-size: clamp(14px, 3vw, 16px);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    margin-top: 24px;
    border-radius: 4px;
    opacity: 0;
    transform: translateY(20px);
  }

  .mobile-menu.open .mobile-contact-btn {
    opacity: 1;
    transform: translateY(0);
    transition-delay: 0.5s;
  }

  .mobile-contact-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: white;
    transition: left 0.3s ease;
    z-index: -1;
  }

  .mobile-contact-btn:hover::before {
    left: 0;
  }

  .mobile-contact-btn:hover {
    color: black;
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(255, 255, 255, 0.2);
  }

  @media (max-width: 768px) {
    .nav,
    .contact-btn {
      display: none;
    }
    
    .menu-btn {
      display: flex;
    }
  }
</style>

<script>
  import { animate, stagger } from 'motion';

  document.addEventListener('DOMContentLoaded', () => {
    // Header scroll behavior
    const headerWrapper = document.getElementById('headerWrapper');
    let lastScrollY = window.scrollY;
    let isScrolling = false;

    const handleScroll = () => {
      if (!isScrolling) {
        window.requestAnimationFrame(() => {
          const currentScrollY = window.scrollY;
          const scrollDifference = currentScrollY - lastScrollY;
          
          if (!headerWrapper) return;

          // Add scrolled class when scrolled down with smooth transition
          if (currentScrollY > 80) {
            headerWrapper.classList.add('scrolled');
          } else {
            headerWrapper.classList.remove('scrolled');
          }

          // Refined hide/show logic with better thresholds
          if (scrollDifference > 8 && currentScrollY > 150) {
            // Scrolling down - hide header with Motion.dev
            if (!headerWrapper.classList.contains('hiding') && !headerWrapper.classList.contains('hidden')) {
              headerWrapper.classList.add('hiding');
              
              // Use Motion.dev for smooth hide animation
              const hideAnimation = animate(
                headerWrapper,
                { 
                  transform: 'translateY(-100%)',
                  opacity: 0
                },
                { 
                  duration: 0.4,
                  ease: [0.23, 1, 0.32, 1],
                  onComplete: () => {
                    headerWrapper.classList.add('hidden');
                    headerWrapper.classList.remove('hiding');
                  }
                }
              );
            }
          } else if (scrollDifference < -3 || currentScrollY < 100) {
            // Scrolling up or near top - show header with Motion.dev
            if (headerWrapper.classList.contains('hiding') || headerWrapper.classList.contains('hidden')) {
              headerWrapper.classList.remove('hiding');
              headerWrapper.classList.remove('hidden');
              
              // Use Motion.dev for smooth show animation
              const showAnimation = animate(
                headerWrapper,
                {
                  transform: 'translateY(0%)',
                  opacity: 1
                },
                {
                  duration: 0.5,
                  ease: [0.23, 1, 0.32, 1]
                }
              );
            }
          }

          lastScrollY = currentScrollY;
          isScrolling = false;
        });
      }
      isScrolling = true;
    };

    // Throttled scroll listener
    window.addEventListener('scroll', handleScroll, { passive: true });

    // Mobile menu functionality
    const menuBtn = document.getElementById('menuBtn');
    const mobileMenu = document.getElementById('mobileMenu');
    const mobileNav = document.querySelector('.mobile-nav');
    const navLinks = document.querySelectorAll('.mobile-nav a');
    const contactBtn = document.querySelector('.mobile-contact-btn');
    
    let isOpen = false;

    const openMenu = () => {
      isOpen = true;
      mobileMenu?.classList.add('open');
      
      // Reset initial states
      if (mobileNav) (mobileNav as HTMLElement).style.transform = 'translateY(30px)';
      navLinks.forEach(link => {
        (link as HTMLElement).style.opacity = '0';
        (link as HTMLElement).style.transform = 'translateY(20px)';
      });
      if (contactBtn) {
        (contactBtn as HTMLElement).style.opacity = '0';
        (contactBtn as HTMLElement).style.transform = 'translateY(20px)';
      }

      // Animate navigation container
      if (mobileNav) {
        animate(mobileNav, 
          { transform: 'translateY(0px)' }, 
          { duration: 0.4, delay: 0.1 }
        );
      }

      // Stagger animate nav links
      navLinks.forEach((link, index) => {
        animate(link, 
          { opacity: 1, transform: 'translateY(0px)' }, 
          { duration: 0.3, delay: 0.2 + (index * 0.1) }
        );
      });

      // Animate contact button
      if (contactBtn) {
        animate(contactBtn, 
          { opacity: 1, transform: 'translateY(0px)' }, 
          { duration: 0.3, delay: 0.5 }
        );
      }
    };

    const closeMenu = () => {
      isOpen = false;
      
      // Reverse animations
      navLinks.forEach(link => {
        animate(link, 
          { opacity: 0, transform: 'translateY(-20px)' }, 
          { duration: 0.2 }
        );
      });

      if (contactBtn) {
        animate(contactBtn, 
          { opacity: 0, transform: 'translateY(-20px)' }, 
          { duration: 0.2 }
        );
      }

      if (mobileNav) {
        animate(mobileNav, 
          { transform: 'translateY(30px)' }, 
          { duration: 0.3, delay: 0.1 }
        );
      }

      // Remove class after animation
      setTimeout(() => {
        mobileMenu?.classList.remove('open');
      }, 400);
    };

    menuBtn?.addEventListener('click', () => {
      if (isOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });
    
    // Close menu when clicking on links or contact button
    mobileMenu?.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (target && (target.tagName === 'A' || target.classList.contains('mobile-contact-btn'))) {
        closeMenu();
      }
    });

    // Close menu when clicking outside content
    mobileMenu?.addEventListener('click', (e) => {
      if (e.target === mobileMenu) {
        closeMenu();
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isOpen) {
        closeMenu();
      }
    });
  });
</script>
