---
// Me.astro - About section component
import MainButton from './MainButton.astro';
import SecondaryButton from './SecondaryButton.astro';
import { Number } from './Number.tsx';

const experienceData = [
  {
    id: "01",
    title: "UX/UI & Frontend Developer",
    company: "OPINATOR (Madrid, Spain)",
    description: "Collaborated Within A Team Of Five UX/UI Designers To Lead The Redesign Of OPINATORs Core WebAPP - A Live Forms Online Creator. Focused On A Developer-First Design Approach.",
    highlight: "I Implemented Modular, Server-Side Rendered Architecture Using Shaden Ul And Modern Frontend Best Practices",
    image: "/images/EnterprisesLogos/ExperienceCards/Opinator.webp"
  },
  {
    id: "02",
    title: "UX/UI & Frontend Developer",
    company: "ANCIENT GLOBAL (Texas, USA)",
    description: "Led A Four-Month UX Engineering Process To Design And Develop The Main Web For Ancient. Global. Built Entirely In Webflow, The Project Focused On Delivering A Seamless And Intelligent User Experience.",
    highlight: " I Was Primarily Responsible For Designing And Implementing The Platform's Hero Banner, Which Integrates An Al-Driven Interaction Layer.",
    image: "/images/EnterprisesLogos/ExperienceCards/Ancient.png"
  },
  {
    id: "03",
    title: "UX/UI & Fullstack Developer",
    company: "AURIN (Cuernavaca, MÃ©xico)",
    description: "I Made: ",
    highlight: "Mobile UX/UI For MonexOne App (Mex & US), Web UX/UI, AI Automations & Fullstack Development In Partnership With Ancient Technologies (Global), Project Managment & UX/Ul For Web Apps Like Inglesindividual , Galicia MX, Dentol MX, Fintpay Baking And May More.",
    image: "/images/EnterprisesLogos/ExperienceCards/Aurin.webp"
  },
  {
    id: "04",
    title: "FOUNDER & DEV",
    company: "WebCrafters (Mexico City)",
    description: "Founded and currently lead WebCrafters, a UX/UI and WebArt agency focused on merging aesthetics, user experience, and AI-powered development.",
    highlight: "Spearhead the design and implementation of custom web applications with intelligent features and scalable infrastructure for clients across diverse industries.",
    image: "/images/EnterprisesLogos/ExperienceCards/WebCrafters.webp"
  }
];
---

<div class="me-section-wrapper w-full overflow-hidden relative justify-center flex">
  <div class="me-section w-full max-w-[1400px] mx-auto px-15 py-16 relative flex flex-col items-start gap-2.5">

  <!-- Main Content Section -->
  <div class="w-full h-[850px] flex flex-col lg:flex-row-reverse items-start ">
    
    <!-- Right Side - Content Section (appears on right in desktop) -->
    <div class="flex-1 self-stretch flex flex-col justify-center items-start gap-9 lg:min-w-[60%]">
      
      <!-- Profile Section -->
      <div class="w-full relative flex flex-wrap items-start" data-animate="fade-up" data-delay="0.4">
        <!-- Circle positioned behind text -->
        <div class="w-[244px] h-[238px] bg-[#D9CCFF] rounded-full absolute top-0 left-0 -z-10 scroll-circle"></div>
        <div class="flex-1 relative z-10">
          <h2 class="text-hero font-median mb-2 split-text-title" style="font-size: clamp(48px, 8vw, 96px); line-height: 0.75;">
            <span class="text-[#080808]">karen ortiz,</span> <span class="text-[#7350cc]">Design<br />Engineer</span>
          </h2>
          <h3 class="text-heading-lg text-[#080808] font-secondary font-bold split-text-subtitle" style="font-size: clamp(28px, 4vw, 44px); line-height: 1.23;">
            Based in Mexico City
          </h3>
        </div>
      </div>

      <!-- Description -->
      <div class="w-full" data-animate="fade-up" data-delay="0.6">
        <p class="text-body-lg font-medium text-[rgba(8,8,8,0.6)] font-primary split-text-description" style="font-size: 20px; line-height: 1.5;">
          That is where I come in. A lover of words, a wrangler of copy. Here to create copy that not only reflects 
          who you are and what you stand for, but words that truly land with those that read them, calling your 
          audience in and making them.
        </p>
      </div>

      <!-- Stats Section -->
      <div class="w-full max-w-[526px] flex items-start gap-[41px] scroll-stats" data-animate="fade-up" data-delay="0.8">
        <div class="w-[43px] h-[43px] bg-[rgba(8,8,8,0.03)] rounded-full"></div>
        <div class="flex flex-col justify-center items-start">
          <Number 
            value={8} 
            className="text-display text-[#080808] font-secondary" 
            style={{ fontSize: '48px', lineHeight: '56px' }}
            delay={800}
            client:load
          />
          <div class="text-body-lg font-medium text-[rgba(8,8,8,0.6)] font-primary" style="font-size: 20px; line-height: 30px;">Award winner</div>
        </div>
        
        <div class="w-[43px] h-[43px] bg-[rgba(8,8,8,0.03)] rounded-full"></div>
        <div class="flex flex-col justify-center items-start">
          <div class="flex items-center">
            <Number 
              value={1} 
              className="text-display text-[#080808] font-secondary" 
              style={{ fontSize: '48px', lineHeight: '56px' }}
              delay={1000}
              client:load
            />
            <span class="text-display text-[#080808] font-secondary" style="font-size: 48px; line-height: 56px;">.2k</span>
          </div>
          <div class="text-body-lg font-medium text-[rgba(8,8,8,0.6)] font-primary" style="font-size: 20px; line-height: 30px;">Worldwide client</div>
        </div>
        
        <div class="w-[43px] h-[43px] bg-[rgba(8,8,8,0.03)] rounded-full"></div>
        <div class="flex flex-col justify-center items-start">
          <div class="flex items-center">
            <Number 
              value={3} 
              className="text-display text-[#080808] font-secondary" 
              style={{ fontSize: '48px', lineHeight: '56px' }}
              delay={1200}
              client:load
            />
            <span class="text-display text-[#080808] font-secondary" style="font-size: 48px; line-height: 56px;">.5k</span>
          </div>
          <div class="text-body-lg font-medium text-[rgba(8,8,8,0.6)] font-primary" style="font-size: 20px; line-height: 30px;">Job done successfully</div>
        </div>
      </div>

      <!-- Buttons Section -->
      <div class="flex items-start gap-9" data-animate="fade-up" data-delay="1.0">
        <!-- Discover My Works Button -->
        <div class="w-[266px]">
          <SecondaryButton text="Discover My Works" />
        </div>

        <!-- Check my LinkedIn Button -->
        <div class="w-[266px]">
          <MainButton text="Check my linkedin" />
        </div>
      </div>
    </div>

    <!-- Left Side - Image Section (appears on left in desktop) -->
    <div class="flex-1 lg:min-w-[40%] h-[850px] items-center scroll-image hidden lg:flex" data-animate="fade-right" data-delay="0.5">
      <div class="w-full aspect-square relative overflow-hidden rounded-lg">
        <img 
          src="/images/Me.webp" 
          alt="Karen Ortiz"
          class="w-full h-full object-cover object-center"
        />
      </div>
    </div>
  </div>

  <!-- Experience Cards Section -->
  <div class="experience-container">
    <div class="experience-scroll">
      {experienceData.map((experience) => (
        <div class="experience-card">
          <div class="experience-header">
            <div class="experience-number">{experience.id}</div>
            <img class="experience-image" src={experience.image} alt={experience.company} />
          </div>
          <div class="experience-content">
            <div class="experience-title">{experience.title}</div>
            <div class="experience-company">{experience.company}</div>
          </div>
          <div class="experience-description">
            <span class="description-normal">{experience.description}</span>
            <span class="description-highlight">{experience.highlight}</span>
          </div>
        </div>
      ))}
    </div>
  </div>

</div>

<style>
  .me-section-wrapper {
    background: white;
    position: relative;
    padding: 65px 60px 0 60px;
  }

  .me-section-wrapper::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
      linear-gradient(rgba(0, 0, 0, 0.02) 1px, transparent 1px),
      linear-gradient(90deg, rgba(0, 0, 0, 0.02) 1px, transparent 1px);
    background-size: 20px 20px;
    pointer-events: none;
    z-index: 1;
  }

  .me-section {
    position: relative;
    z-index: 2;
  }

  .secondary-btn {
    background: linear-gradient(135deg, #2c2c2c 0%, #1a1a1a 50%, #000000 100%);
    box-shadow: 0px 4px 200px rgba(255, 255, 255, 0.05);
  }

  .main-btn {
    background: 
      linear-gradient(47deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.30) 100%),
      url('/images/MainImage.webp');
    background-size: cover;
    background-position: center;
    box-shadow: 0px 4px 200px rgba(255, 255, 255, 0.05);
  }

  .btn-text {
    text-shadow: 0px 2px 4px rgba(0, 0, 0, 0.8);
  }


  .counter {
    transition: all 0.3s ease;
  }

  /* Split text styles */
  .split-char {
    display: inline-block;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .split-char.animate {
    opacity: 1;
    transform: translateY(0);
  }

  .split-word {
    display: inline-block;
    overflow: hidden;
  }

  /* Animation styles */
  [data-animate] {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  [data-animate="fade-left"] {
    opacity: 0;
    transform: translateX(30px);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  [data-animate="fade-right"] {
    opacity: 0;
    transform: translateX(-30px);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  [data-animate].animate {
    opacity: 1;
    transform: translateY(0);
  }

  [data-animate="fade-left"].animate {
    opacity: 1;
    transform: translateX(0);
  }

  [data-animate="fade-right"].animate {
    opacity: 1;
    transform: translateX(0);
  }

  /* Experience Cards Styles */
  .experience-container {
    width: 100%;
    overflow: hidden;
    position: relative;
    min-height: 25rem; /* Mantener altura del container */
    margin-top: 60px;
  }

  .experience-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to right, white 0%, transparent 20%, transparent 80%, white 100%);
    pointer-events: none;
    z-index: 1;
  }

  .experience-scroll {
    display: flex;
    gap: 30px;
    overflow-x: auto;
    -ms-overflow-style: none;
    scrollbar-width: none;
    height: 100%;
    align-items: center;
    padding: 0 30px;
  }

  .experience-scroll::-webkit-scrollbar {
    display: none;
  }

  .experience-card {
    flex: 0 0 auto;
    min-width: 24.375rem; /* 390px */
    width: 24.375rem; /* 390px */
    min-height: 16.8rem; /* 268px - altura mÃ¡s baja como GemSection */
    padding: 1.25rem; /* 20px */
    background: white;
    border: 1px solid rgba(74, 36, 181, 0.15);
    border-radius: 1.25rem; /* 20px */
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    gap: 0.75rem; /* 12px */
    margin: 1.25rem 0; /* 20px */
    transition: all 0.3s ease;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
    position: relative;
    overflow: hidden;
  }

  .experience-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .experience-number {
    color: #1B1B1B;
    font-size: 1.05rem; /* 16.8px - 30% smaller */
    font-family: var(--font-primary);
    font-weight: 500;
    line-height: 1.4rem; /* 22.4px - 30% smaller */
    word-wrap: break-word;
  }

  .experience-image {
    width: 2.5rem; /* 40px */
    height: 2.5rem; /* 40px */
    border-radius: 0.5rem; /* 8px */
    object-fit: cover;
    background: white;
    padding: 0.25rem; /* 4px */
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
  }

  .experience-content {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    width: 100%;
  }

  .experience-title {
    width: 100%;
    color: black;
    font-size: 1.05rem; /* 16.8px - 30% smaller */
    font-family: var(--font-primary);
    font-weight: 700;
    text-transform: uppercase;
    line-height: 1.4rem; /* 22.4px - 30% smaller */
    word-wrap: break-word;
  }

  .experience-company {
    width: 100%;
    color: #1B1B1B;
    font-size: 0.79rem; /* 12.6px - 30% smaller */
    font-family: var(--font-primary);
    font-weight: 500;
    line-height: 1.14rem; /* 18.2px - 30% smaller */
    word-wrap: break-word;
  }

  .experience-description {
    align-self: stretch;
    flex: 1;
  }

  .description-normal {
    color: #1B1B1B;
    font-size: 0.79rem; /* 12.6px - 30% smaller */
    font-family: var(--font-primary);
    font-weight: 500;
    line-height: 1.14rem; /* 18.2px - 30% smaller */
    word-wrap: break-word;
  }

  .description-highlight {
    color: #4A24B5;
    font-size: 0.79rem; /* 12.6px - 30% smaller */
    font-family: var(--font-primary);
    font-weight: 500;
    line-height: 1.14rem; /* 18.2px - 30% smaller */
    word-wrap: break-word;
  }

  /* Responsive styles for experience cards */
  @media (max-width: 768px) {
    .experience-container {
      min-height: 20rem; /* 320px mÃ­nimo */
    }

    .experience-card {
      min-width: 20rem; /* 320px */
      width: 20rem; /* 320px */
      min-height: 15.6rem; /* 250px - altura mÃ¡s baja para tablet */
    }

    .experience-scroll {
      padding: 0 1.25rem; /* 20px */
    }

    .experience-number {
      font-size: 0.875rem; /* 14px - 30% smaller */
      line-height: 1.225rem; /* 19.6px - 30% smaller */
    }

    .experience-title {
      font-size: 0.875rem; /* 14px - 30% smaller */
      line-height: 1.225rem; /* 19.6px - 30% smaller */
    }

    .experience-company {
      font-size: 0.7rem; /* 11.2px - 30% smaller */
      line-height: 1.05rem; /* 16.8px - 30% smaller */
    }

    .description-normal,
    .description-highlight {
      font-size: 0.7rem; /* 11.2px - 30% smaller */
      line-height: 1.05rem; /* 16.8px - 30% smaller */
    }
  }

  @media (max-width: 480px) {
    .experience-container {
      min-height: 18.75rem; /* 300px mÃ­nimo */
    }

    .experience-card {
      min-width: 17.5rem; /* 280px */
      width: 17.5rem; /* 280px */
      min-height: 14.4rem; /* 230px - altura mÃ¡s baja para mobile */
    }

    .experience-scroll {
      padding: 0 0.9375rem; /* 15px */
    }

    .experience-number {
      font-size: 0.79rem; /* 12.6px - 30% smaller */
      line-height: 1.05rem; /* 16.8px - 30% smaller */
    }

    .experience-title {
      font-size: 0.79rem; /* 12.6px - 30% smaller */
      line-height: 1.05rem; /* 16.8px - 30% smaller */
    }

    .experience-company {
      font-size: 0.61rem; /* 9.8px - 30% smaller */
      line-height: 0.875rem; /* 14px - 30% smaller */
    }

    .description-normal,
    .description-highlight {
      font-size: 0.61rem; /* 9.8px - 30% smaller */
      line-height: 0.875rem; /* 14px - 30% smaller */
    }
  }
</style>

<script>
  import { animate, stagger, inView, scroll } from 'motion';

  // Split text function
  function splitText(element: HTMLElement, type: 'chars' | 'words' = 'chars') {
    const text = element.textContent || '';
    element.innerHTML = '';
    
    if (type === 'chars') {
      const chars = text.split('').map(char => {
        if (char === ' ') return ' ';
        const span = document.createElement('span');
        span.className = 'split-char';
        span.textContent = char;
        return span;
      });
      
      chars.forEach(char => {
        if (typeof char === 'string') {
          element.appendChild(document.createTextNode(char));
        } else {
          element.appendChild(char);
        }
      });
      
      return element.querySelectorAll('.split-char');
    } else {
      const words = text.split(' ').map(word => {
        const span = document.createElement('span');
        span.className = 'split-word';
        span.innerHTML = word.split('').map(char => 
          `<span class="split-char">${char}</span>`
        ).join('');
        return span;
      });
      
      words.forEach((word, index) => {
        element.appendChild(word);
        if (index < words.length - 1) {
          element.appendChild(document.createTextNode(' '));
        }
      });
      
      return element.querySelectorAll('.split-char');
    }
  }

  // Initialize split text animations
  function initSplitTextAnimations() {
    // Title animation
    const title = document.querySelector('.split-text-title') as HTMLElement;
    if (title) {
      const chars = splitText(title, 'chars');
      
      inView(title, () => {
        animate(
          chars,
          { opacity: 1, transform: 'translateY(0px)' },
          { 
            delay: stagger(0.03),
            duration: 0.6,
            easing: [0.25, 0.46, 0.45, 0.94]
          }
        );
      }, { margin: '0px 0px -100px 0px' });
    }

    // Subtitle animation
    const subtitle = document.querySelector('.split-text-subtitle') as HTMLElement;
    if (subtitle) {
      const chars = splitText(subtitle, 'chars');
      
      inView(subtitle, () => {
        animate(
          chars,
          { opacity: 1, transform: 'translateY(0px)' },
          { 
            delay: stagger(0.02),
            duration: 0.5,
            easing: [0.25, 0.46, 0.45, 0.94]
          }
        );
      }, { margin: '0px 0px -100px 0px' });
    }

    // Description animation (by words for better readability)
    const description = document.querySelector('.split-text-description') as HTMLElement;
    if (description) {
      const chars = splitText(description, 'words');
      
      inView(description, () => {
        animate(
          chars,
          { opacity: 1, transform: 'translateY(0px)' },
          { 
            delay: stagger(0.01),
            duration: 0.4,
            easing: [0.25, 0.46, 0.45, 0.94]
          }
        );
      }, { margin: '0px 0px -100px 0px' });
    }
  }

  // Initialize scroll parallax effects
  function initScrollParallax() {
    // Purple circle - slow parallax (0.3x speed)
    const circle = document.querySelector('.scroll-circle') as HTMLElement;
    if (circle) {
      scroll(
        (progress: number) => {
          const yOffset = progress * 50; // Move 50px over full scroll
          circle.style.transform = `translateY(${yOffset}px)`;
        },
        {
          target: circle,
          offset: ["start end", "end start"]
        }
      );
    }

    // Profile image - medium parallax (0.5x speed)
    const image = document.querySelector('.scroll-image') as HTMLElement;
    if (image) {
      scroll(
        (progress: number) => {
          const yOffset = progress * -30; // Move up 30px
          image.style.transform = `translateY(${yOffset}px)`;
        },
        {
          target: image,
          offset: ["start end", "end start"]
        }
      );
    }

    // Stats section - fast parallax (0.8x speed)
    const stats = document.querySelector('.scroll-stats') as HTMLElement;
    if (stats) {
      scroll(
        (progress: number) => {
          const yOffset = progress * -20; // Move up 20px
          const scale = 1 + (progress * 0.05); // Slight scale effect
          stats.style.transform = `translateY(${yOffset}px) scale(${scale})`;
        },
        {
          target: stats,
          offset: ["start end", "end start"]
        }
      );
    }

    // Title section - rotation effect
    const title = document.querySelector('.split-text-title') as HTMLElement;
    if (title) {
      scroll(
        (progress: number) => {
          const rotation = progress * 2; // Rotate 2 degrees
          const yOffset = progress * -10; // Slight upward movement
          title.style.transform = `translateY(${yOffset}px) rotate(${rotation}deg)`;
        },
        {
          target: title,
          offset: ["start center", "end center"]
        }
      );
    }
  }

  // Motion.dev scroll animations
  function initScrollAnimations() {
    const animatedElements = document.querySelectorAll('[data-animate]');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement;
          const delay = parseFloat(element.getAttribute('data-delay') || '0');
          
          setTimeout(() => {
            element.classList.add('animate');
          }, delay * 1000);
          
          observer.unobserve(element);
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });
    
    animatedElements.forEach(element => observer.observe(element));
  }

  // Initialize experience cards scroll animation
  function initExperienceScroll() {
    const experienceContainer = document.querySelector('.experience-container');
    const experienceScroll = document.querySelector('.experience-scroll');
    
    if (experienceContainer && experienceScroll) {
      // Calculate total scroll width
      const scrollWidth = experienceScroll.scrollWidth - experienceScroll.clientWidth;
      
      if (scrollWidth > 0) {
        // Create scroll-triggered horizontal animation for experience cards
        scroll(
          (progress: number) => {
            experienceScroll.scrollLeft = progress * scrollWidth;
          },
          {
            target: experienceContainer,
            offset: ["start center", "end center"]
          }
        );
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initScrollAnimations();
    initSplitTextAnimations();
    initScrollParallax();
    initExperienceScroll();
  });
  
  // Re-initialize for Astro page transitions
  document.addEventListener('astro:page-load', () => {
    initScrollAnimations();
    initSplitTextAnimations();
    initScrollParallax();
    initExperienceScroll();
  });
</script>
